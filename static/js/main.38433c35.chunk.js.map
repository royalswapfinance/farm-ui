{"version":3,"sources":["config/constants/l2farms.ts","state/l2farms/fetchFarms2.ts","state/l2farms/fetchFarmUser2.ts","state/l2farms/index.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/actions.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","contexts/Localisation/translationsContext.ts","config/constants/types.ts","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/contracts.ts","utils/addressHelpers.ts","utils/multicall.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["farms","pid","risk","lpSymbol","lpAddresses","97","56","tokenSymbol","tokenAddresses","quoteTokenSymbol","QuoteToken","BUSD","quoteTokenAdresses","contracts","busd","BNB","wbnb","isTokenOnly","fetchFarms2","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","CHAIN_ID","calls","address","name","params","getMasterChefAddress2","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","info","totalAllocPoint","royalPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances2","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances2","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances2","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings2","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData2","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData2","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync2","p","dispatch","fetchFarmUserDataAsync2","console","log","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","fetchFarms","getMasterChefAddress","fetchFarmUserAllowances","fetchFarmUserTokenBalances","fetchFarmUserStakedBalances","fetchFarmUserEarnings","setFarmsPublicData","setFarmUserData","fetchFarmsPublicDataAsync","fetchFarmUserDataAsync","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useL2Farms","farms2","useFarmFromPid","useFarmUser","useL2FarmFromPid","useL2FarmUser","usePriceBnbBusd","usePriceBnb2Busd","usePriceCakeBusd","usePriceCake2Busd","useTotalValue","bnbPrice","cakePrice","value","i","length","val","CAKE","plus","useTotalValue2","toFixed","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","useContext","fastRefresh","defaultTranslationState","translations","setTranslations","TranslationsContext","PoolCategory","Container","styled","theme","mediaQueries","sm","Page","lg","cake","masterChef","lottery","lotteryNFT","mulltiCall","crown","crownMasterChef","getCakeAddress","addresses","chainId","getCakeAddress2","getMulticallAddress","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","pools","nonBnbPools","poolsConfig","filter","stakingTokenName","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingEgg","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","cakeAddress","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","Home","lazy","Farms","L1Farms","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","path","exact","tokenMode","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","farmsReducer2","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"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","file":"static/js/main.38433c35.chunk.js","sourcesContent":["import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n    {\n        pid: 11,\n        risk: 5,\n        lpSymbol: 'ROYA-CROWN LP',\n        lpAddresses: {\n            97: '',\n            56: '0x4a83735ccb6fab01be021c2c03fd6068c88f2021',\n        },\n        tokenSymbol: 'CROWN',\n        tokenAddresses: {\n            97: '',\n            56: '0x2718e864908c6aa5a69a700022964a455a6a6aed',\n        },\n        quoteTokenSymbol: QuoteToken.BUSD,\n        quoteTokenAdresses: contracts.busd,\n    },\n    {\n        pid: 1,\n        risk: 5,\n        lpSymbol: 'CROWN-BNB LP',\n        lpAddresses: {\n            97: '',\n            56: '0x47347f65a4354c66a8497d635cdba53345f075a4',\n        },\n        tokenSymbol: 'CROWN',\n        tokenAddresses: {\n            97: '',\n            56: '0x2718e864908c6aa5a69a700022964a455a6a6aed',\n        },\n        quoteTokenSymbol: QuoteToken.BNB,\n        quoteTokenAdresses: contracts.wbnb,\n    },\n    {\n        pid: 2,\n        risk: 3,\n        lpSymbol: 'CROWN-BUSD LP',\n        lpAddresses: {\n            97: '',\n            56: '0xc242d82f4a968c2c0eb8e74337019c395f39744a',\n        },\n        tokenSymbol: 'CROWN',\n        tokenAddresses: {\n            97: '',\n            56: '0x2718e864908c6aa5a69a700022964a455a6a6aed',\n        },\n        quoteTokenSymbol: QuoteToken.BUSD,\n        quoteTokenAdresses: contracts.busd,\n    },\n    {\n        pid: 3,\n        risk: 3,\n        lpSymbol: 'BNB-BUSD LP',\n        lpAddresses: {\n            97: '',\n            56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f',\n        },\n        tokenSymbol: 'BNB',\n        tokenAddresses: {\n            97: '',\n            56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n        },\n        quoteTokenSymbol: QuoteToken.BUSD,\n        quoteTokenAdresses: contracts.busd,\n    },\n    {\n        pid: 4,\n        risk: 1,\n        lpSymbol: 'USDT-BUSD LP',\n        lpAddresses: {\n            97: '',\n            56: '0xc15fa3e22c912a276550f3e5fe3b0deb87b55acd',\n        },\n        tokenSymbol: 'USDT',\n        tokenAddresses: {\n            97: '',\n            56: '0x55d398326f99059ff775485246999027b3197955',\n        },\n        quoteTokenSymbol: QuoteToken.BUSD,\n        quoteTokenAdresses: contracts.busd,\n    },\n    {\n        pid: 6,\n        risk: 1,\n        lpSymbol: 'USDC-BUSD LP',\n        lpAddresses: {\n            97: '',\n            56: '0x680dd100e4b394bda26a59dd5c119a391e747d18',\n        },\n        tokenSymbol: 'USDC',\n        tokenAddresses: {\n            97: '',\n            56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\n        },\n        quoteTokenSymbol: QuoteToken.BUSD,\n        quoteTokenAdresses: contracts.busd,\n    },\n    {\n        pid: 7,\n        risk: 1,\n        lpSymbol: 'DAI-BUSD LP',\n        lpAddresses: {\n            97: '',\n            56: '0x3aB77e40340AB084c3e23Be8e5A6f7afed9D41DC',\n        },\n        tokenSymbol: 'DAI',\n        tokenAddresses: {\n            97: '',\n            56: '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',\n        },\n        quoteTokenSymbol: QuoteToken.BUSD,\n        quoteTokenAdresses: contracts.busd,\n    },\n    {\n        pid: 8,\n        risk: 2,\n        isTokenOnly: true,\n        lpSymbol: 'ETH',\n        lpAddresses: {\n            97: '',\n            56: '0xd9a0d1f5e02de2403f68bb71a15f8847a854b494', // ETH-BUSD LP\n        },\n        tokenSymbol: 'ETH',\n        tokenAddresses: {\n            97: '',\n            56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\n        },\n        quoteTokenSymbol: QuoteToken.BUSD,\n        quoteTokenAdresses: contracts.busd,\n    },\n    {\n        pid: 9,\n        risk: 2,\n        isTokenOnly: true,\n        lpSymbol: 'BTCB',\n        lpAddresses: {\n            97: '',\n            56: '0xb8875e207EE8096a929D543C9981C9586992eAcb', // BTCB-BUSD LP\n        },\n        tokenSymbol: 'BTCB',\n        tokenAddresses: {\n            97: '',\n            56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\n        },\n        quoteTokenSymbol: QuoteToken.BUSD,\n        quoteTokenAdresses: contracts.busd,\n    },\n    {\n        pid: 10,\n        risk: 3,\n        isTokenOnly: true,\n        lpSymbol: 'WBNB',\n        lpAddresses: {\n            97: '',\n            56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB-BUSD LP\n        },\n        tokenSymbol: 'WBNB',\n        tokenAddresses: {\n            97: '',\n            56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n        },\n        quoteTokenSymbol: QuoteToken.BUSD,\n        quoteTokenAdresses: contracts.busd,\n    },\n]\n\nexport default farms\n","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress2 } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/l2farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms2 = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress2()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      // console.log('lpaddress', lpAdress);\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if(farmConfig.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n\n\n\n      }\n\n      const [info, totalAllocPoint, royalPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress2(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress2(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress2(),\n          name: 'royalPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        royalPerBlock: new BigNumber(royalPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms2\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/l2farms'\nimport { getMasterChefAddress2 } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances2 = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress2()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances2 = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances2 = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress2()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings2 = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress2()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingEgg',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/l2farms'\nimport fetchFarms2 from './fetchFarms2'\nimport {\n  fetchFarmUserEarnings2,\n  fetchFarmUserAllowances2,\n  fetchFarmUserTokenBalances2,\n  fetchFarmUserStakedBalances2,\n} from './fetchFarmUser2'\nimport { Farms2State, Farm } from '../types'\n\nconst initialState: Farms2State = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms2',\n  initialState,\n  reducers: {\n    setFarmsPublicData2: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData2: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData2, setFarmUserData2 } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync2 = (p:any) => async (dispatch) => {\n  const farms = await fetchFarms2()\n  dispatch(setFarmsPublicData2(farms))\n}\nexport const fetchFarmUserDataAsync2 = (account) => async (dispatch) => {\n  console.log('callback');\n  const userFarmAllowances = await fetchFarmUserAllowances2(account)\n  console.log('callback2');\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances2(account)\n  console.log('callback3');\n  const userStakedBalances = await fetchFarmUserStakedBalances2(account)\n  console.log('callback4');\n  const userFarmEarnings = await fetchFarmUserEarnings2(account)\n  console.log('callback5');\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData2({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if(farmConfig.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, royalPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'royalPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        royalPerBlock: new BigNumber(royalPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingEgg',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\n\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  console.log('callbackaaa');\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport { fetchFarmsPublicDataAsync2, fetchFarmUserDataAsync2 } from './l2farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync, fetchFarmsPublicDataAsync2 } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    dispatch(fetchFarmsPublicDataAsync2(null))\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useL2Farms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms2.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\nexport const useL2FarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms2.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useL2FarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms2.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useL2FarmUser = (pid) => {\n  const farm = useL2FarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 2 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceBnb2Busd = (): BigNumber => {\n  const pid = 2 // BUSD-BNB LP\n  const farm = useL2FarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 0; // EGG-BUSD LP\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\nexport const usePriceCake2Busd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 2; // EGG-BUSD LP\n  const farm = useL2FarmFromPid(pid);\n  console.log(farm);\n  console.log('farm');\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      }else{\n        val = (farm.lpTotalInQuoteToken);\n      }\n\n      if(val >= 0)\n        value = value.plus(val);\n\n    }\n  }\n  return value;\n}\n\nexport const useTotalValue2 = (): BigNumber => {\n  const farms = useL2Farms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCake2Busd();\n  console.log('cake', cakePrice.toFixed(5));\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      }else{\n        val = (farm.lpTotalInQuoteToken);\n      }\n      if(val >= 0)\n        value = value.plus(val);\n    }\n  }\n  return value;\n}\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","export default {\n  cake: {\n    56: '0x682FF2A434054EC3A7099615EaEdf0517ffcB439',\n    97: '',\n  },\n  masterChef: {\n    56: '0x7456fc08613d5aaca788a85888f3cc116ef736e6',\n    97: '0x7456fc08613d5aaca788a85888f3cc116ef736e6',\n  },\n  wbnb: {\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    97: '',\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n  },\n  crown: {\n    56: '0x2718E864908C6aa5A69a700022964a455a6a6aEd',\n    97: '0x2718E864908C6aa5A69a700022964a455a6a6aEd',\n  },\n  crownMasterChef: {\n    56: '0x62541B3D2F942Fc497dAdf53513079e2e99316dB',\n    97: '0x62541B3D2F942Fc497dAdf53513079e2e99316dB',\n  }\n}\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getCakeAddress2 = () => {\n  return addresses.crown[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMasterChefAddress2 = () => {\n  return addresses.crownMasterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingEgg('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'ROYA-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0xE8C9064Ae7A0d3BFE95FA38189632ead48F3063c',\n    },\n    tokenSymbol: 'ROYA',\n    tokenAddresses: {\n      97: '',\n      56: '0x682FF2A434054EC3A7099615EaEdf0517ffcB439',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'ROYA-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0x29E921DFE4195bb791986649E7BeAfD60d893116',\n    },\n    tokenSymbol: 'ROYA',\n    tokenAddresses: {\n      97: '',\n      56: '0x682FF2A434054EC3A7099615EaEdf0517ffcB439',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 2,\n    risk: 3,\n    lpSymbol: 'BNB-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f',\n    },\n    tokenSymbol: 'BNB',\n    tokenAddresses: {\n      97: '',\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 3,\n    risk: 2,\n    lpSymbol: 'BTCB-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0x7561eee90e24f3b348e1087a005f78b4c8453524',\n    },\n    tokenSymbol: 'BTCB',\n    tokenAddresses: {\n      97: '',\n      56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 4,\n    risk: 2,\n    lpSymbol: 'ETH-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0x70d8929d04b60af4fb9b58713ebcf18765ade422',\n    },\n    tokenSymbol: 'ETH',\n    tokenAddresses: {\n      97: '',\n      56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 5,\n    risk: 1,\n    lpSymbol: 'DOT-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0xbCD62661A6b1DEd703585d3aF7d7649Ef4dcDB5c',\n    },\n    tokenSymbol: 'DOT',\n    tokenAddresses: {\n      97: '',\n      56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 6,\n    risk: 1,\n    lpSymbol: 'USDT-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0xc15fa3e22c912a276550f3e5fe3b0deb87b55acd',\n    },\n    tokenSymbol: 'USDT',\n    tokenAddresses: {\n      97: '',\n      56: '0x55d398326f99059ff775485246999027b3197955',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 7,\n    risk: 5,\n    isTokenOnly: true,\n    lpSymbol: 'ROYA',\n    lpAddresses: {\n      97: '',\n      56: '0xE8C9064Ae7A0d3BFE95FA38189632ead48F3063c', // VIKING-BUSD LP\n    },\n    tokenSymbol: 'ROYA',\n    tokenAddresses: {\n      97: '',\n      56: '0x682FF2A434054EC3A7099615EaEdf0517ffcB439',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 8,\n    risk: 1,\n    isTokenOnly: true,\n    lpSymbol: 'BUSD',\n    lpAddresses: {\n      97: '',\n      56: '0xE8C9064Ae7A0d3BFE95FA38189632ead48F3063c', // VIKING-BUSD LP (BUSD-BUSD will ignore)\n    },\n    tokenSymbol: 'BUSD',\n    tokenAddresses: {\n      97: '',\n      56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 9,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'WBNB',\n    lpAddresses: {\n      97: '',\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB-BUSD LP\n    },\n    tokenSymbol: 'WBNB',\n    tokenAddresses: {\n      97: '',\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 10,\n    risk: 2,\n    isTokenOnly: true,\n    lpSymbol: 'ETH',\n    lpAddresses: {\n      97: '',\n      56: '0xd9a0d1f5e02de2403f68bb71a15f8847a854b494', // ETH-BUSD LP\n    },\n    tokenSymbol: 'ETH',\n    tokenAddresses: {\n      97: '',\n      56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n]\n\nexport default farms\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  // ZHCN,\n  // ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Exchange',\n        href: 'https://exchange.royalswap.io/#/swap?inputCurrency=0x682FF2A434054EC3A7099615EaEdf0517ffcB439'\n      },\n      {\n        label: 'Liquidity',\n        href: 'https://exchange.royalswap.io/#/pool'\n      }\n    ]\n  },\n  {\n    label: 'Farms',\n    icon: 'FarmIcon',\n    href: '/farms',\n  },\n  {\n    label: 'Pools',\n    icon: 'PoolIcon',\n    href: '/nests',\n  },\n  {\n    label: 'Layered Farming',\n    icon: 'IfoIcon',\n    items: [\n      {\n        label: 'Farms',\n        href: '/layered/farms',\n      },\n      {\n        label: 'Pools',\n        href: '/layered/pools',\n      }\n    ]\n  },\n\n  {\n    label: 'Info',\n    icon: 'InfoIcon',\n    items: [\n      {\n        label: 'PancakeSwap',\n        href: 'https://exchange.royalswap.io/#/swap?inputCurrency=0x682FF2A434054EC3A7099615EaEdf0517ffcB439',\n      }\n    ],\n  },\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: \"Github\",\n        href: \"https://github.com/royalswapfinance\",\n      }\n    ],\n  },\n  {\n    label: 'Audit',\n    icon: 'HelmetIcon',\n    href: \"https://github.com/royalswapfinance/farm-ui/blob/main/files/audit.pdf\",\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n  const cakeAddress = `https://bscscan.com/token/${getCakeAddress()}`\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      priceLink={cakeAddress}\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch, HashRouter } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\nconst L1Farms = lazy(() => import('./views/L1Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\nconst SoonTm = lazy(() => import('./views/SoonTm'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <HashRouter>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/nests\">\n              <Farms tokenMode/>\n            </Route>\n\n            <Route path=\"/layered/farms\">\n              <L1Farms />\n            </Route>\n\n            <Route path=\"/layered/pools\">\n              <L1Farms tokenMode/>\n            </Route>\n            {/* <Route path=\"/pools\"> */}\n            {/*  <Pools /> */}\n            {/* </Route> */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n    </HashRouter>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport farmsReducer2 from './l2farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    farms2: farmsReducer2,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n"],"sourceRoot":""}