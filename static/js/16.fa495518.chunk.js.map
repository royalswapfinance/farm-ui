{"version":3,"sources":["hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","hooks/useTokenBalance.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","setBalance","res","fetchAllBalances","useTokenBalance","tokenAddress","ethereum","getTokenBalance","fetchBalance","StyledFarmStakingCard","styled","Card","Block","div","Label","img","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","eggPrice","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getContract","cakeABI","methods","call","supply","fetchTotalSupply","useTotalSupply","burnedBalance","balanceOf","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","console","log","royalPerBlock","totalSupply2","getCakeAddress2","useTotalSupply2","burnedBalance2","useBurnedBalance2","farms2","useL2Farms","eggPrice2","usePriceCake2Busd","circSupply2","cakeSupply2","marketCap2","crownPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","totalValue2","useTotalValue2","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","height","chrome","width","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","src","alt","FarmStakingCard"],"mappings":"iXAyCeA,EA3Ba,WAAO,IAAD,EACkBC,mBAA4B,IAD9C,mBACzBC,EADyB,KACNC,EADM,KAExBC,EAAYC,cAAZD,QACAE,EAAgBC,cAAhBD,YAqBR,OAnBAE,qBAAU,WAcJJ,GAbe,uCAAG,gCAAAK,EAAA,6DACdC,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvCC,QAASC,cACTC,KAAM,aACNC,OAAQ,CAACJ,EAAKK,IAAKd,OAJD,SAOKe,YAAUC,EAAeV,GAP9B,OAOdW,EAPc,OAQdC,EAAUX,IAAYC,KAAI,SAACC,EAAMU,GAAP,mBAAC,eAAsBV,GAAvB,IAA6BW,QAAS,IAAIC,IAAUJ,EAAWE,SAE/FpB,EAAqBmB,GAVD,2CAAH,oDAcjBI,KAED,CAACtB,EAASE,IAENJ,G,0BCHMyB,EAxB6B,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,SAA0C,IAAhCC,gBAAgC,MAArB,OAAqB,EAAbC,EAAa,EAAbA,OAAa,EAClEC,qBAAW,CACrCC,MAAO,EACPC,IAAKN,EACLO,SAAU,EACVC,UAAW,IACXP,cAEeQ,IAAbR,EAAyBA,EAAWD,EAAQ,EAAI,EAAIA,EAAQ,IAAM,EAAI,IAPlEU,EADsF,EACtFA,QAASC,EAD6E,EAC7EA,OAUXC,EAAcC,iBAAOF,GAM3B,OAJA/B,qBAAU,WACRgC,EAAYE,QAAQd,KACnB,CAACA,EAAOY,IAGT,eAAC,IAAD,CAAMG,MAAI,EAACb,SAAUA,EAArB,UACGC,EAAQO,MCPAM,EAfY,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACrBC,EAAkBC,cAGxB,OAFoB1C,cAAZD,QAUD,cAAC,EAAD,CAAWwB,MAAOiB,IANrB,cAAC,IAAD,CAAMG,MAAM,eAAeC,MAAO,CAAEC,WAAY,QAAhD,SACGJ,EAAgB,IAAK,aCSfK,EAfW,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACpBN,EAAkBC,cAGxB,OAFoB1C,cAAZD,QAUD,cAAC,EAAD,CAAWwB,MAAOwB,EAAatB,SAAS,SAN3C,cAAC,IAAD,CAAMkB,MAAM,eAAeC,MAAO,CAAEC,WAAY,QAAhD,SACGJ,EAAgB,IAAK,aCkBfO,EA1BQ,WAAO,IAAD,EACIpD,mBAAS,IADb,mBACpBqD,EADoB,KACVC,EADU,KAEnBnD,EAAiCC,cAAjCD,QACAE,EAAgBC,cAAhBD,YAoBR,OAlBAE,qBAAU,WAaJJ,GAZkB,uCAAG,8BAAAK,EAAA,6DACjBC,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvCC,QAASC,cACTC,KAAM,aACNC,OAAQ,CAACJ,EAAKK,IAAKd,OAJE,SAOLe,YAAUC,EAAeV,GAPpB,OAOjB8C,EAPiB,OASvBD,EAAWC,GATY,2CAAH,oDAapBC,KAED,CAACrD,EAASE,IAENgD,G,mCCkEMI,EAvFS,SAACC,GAA0B,IAAD,EAClB1D,mBAAS,IAAIwB,IAAU,IADL,mBACzCD,EADyC,KAChC+B,EADgC,OAEuBlD,cAA/DD,EAFwC,EAExCA,QAASwD,EAF+B,EAE/BA,SACTtD,EAAgBC,cAAhBD,YAaR,OAXAE,qBAAU,WAMJJ,GAAWwD,GALG,uCAAG,4BAAAnD,EAAA,sEACDoD,YAAgBD,EAAUD,EAAcvD,GADvC,OACboD,EADa,OAEnBD,EAAW,IAAI9B,IAAU+B,IAFN,2CAAH,oDAMhBM,KAED,CAAC1D,EAASwD,EAAUD,EAAcrD,IAE9BkB,G,SCTHuC,EAAwBC,YAAOC,IAAPD,CAAH,sKAOrBE,EAAQF,IAAOG,IAAV,oDAQLC,GAJYJ,IAAOK,IAAV,oDAIDL,IAAOG,IAAV,+DACA,qBAAGG,MAAkBC,OAAOC,eAIjCC,EAAUT,IAAOG,IAAV,iDAyEEO,GArEW,WAAO,IAAD,EACIzE,oBAAS,GADb,mBACvB0E,EADuB,KACZC,EADY,KAEtBxE,EAAYC,cAAZD,QACF0C,EAAkBC,cAClB8B,EAAmB7E,IACnBoD,EAAc0B,YAAiBpB,EAAgBqB,gBAC/CC,EAAWC,cAAmBC,WAE9BrC,EADcQ,IACY8B,QAAO,SAACC,EAAOC,GAC7C,OAAOD,EAAQ,IAAI3D,IAAU4D,GAASlB,IAAI,IAAI1C,IAAU,IAAI6D,IAAI,KAAKJ,aACpE,GACGK,EAAoBV,EAAiBW,QAAO,SAACC,GAAD,OAAiBA,EAAYjE,QAAQ0D,WAAa,KAE5FQ,EAAaC,YAAcJ,EAAkB3E,KAAI,SAACgF,GAAD,OAAqBA,EAAgB1E,QAAtFwE,SAEFG,EAAkBC,sBAAW,sBAAC,sBAAArF,EAAA,6DAClCmE,GAAa,GADqB,kBAG1Bc,IAH0B,6EAOhCd,GAAa,GAPmB,0EASjC,CAACc,IAEJ,OACE,cAAC3B,EAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASgC,KAAK,KAAKC,GAAG,OAAtB,SACGlD,EAAgB,IAAK,qBAGxB,eAACoB,EAAD,WACE,cAACE,EAAD,UAAQtB,EAAgB,IAAK,qBAC7B,cAAC,EAAD,CAAoBD,YAAaA,IACjC,eAACuB,EAAD,iBAAWY,EAAWnC,GAAaoD,QAAQ,SAE7C,eAAC/B,EAAD,WACE,cAACE,EAAD,UAAQtB,EAAgB,IAAK,oBAC7B,cAAC,EAAD,CAAmBM,YAAaA,IAChC,eAACgB,EAAD,iBAAWY,EAAW5B,GAAa6C,QAAQ,SAE7C,eAAC/B,EAAD,WACE,cAACE,EAAD,UAAQtB,EAAgB,IAAK,qBAC7B,cAAC,EAAD,CAAoBD,YAAaA,IACjC,eAACuB,EAAD,iBAAWY,EAAWnC,GAAaoD,QAAQ,SAE7C,cAACxB,EAAD,UACGrE,EACC,cAAC,IAAD,CACE8F,GAAG,cACHC,SAAUZ,EAAkBa,QAAU,GAAKzB,EAC3C0B,QAASR,EACTS,WAAS,EAJX,SAMG3B,EACG7B,EAAgB,IAAK,mBACrBA,EAAgB,IAAD,uBAAsByC,EAAkBa,OAAxC,QAGrB,cAACG,EAAA,EAAD,CAAcD,WAAS,YC3F7BE,GAAkBxC,YAAOC,IAAPD,CAAH,yEAKfyC,GAAMzC,IAAOG,IAAV,oJAsGMuC,GA9FG,WAChB,IAAM5D,EAAkBC,cAClB4D,EFGsB,WAAO,IAC3BC,EAAgBrG,cAAhBqG,YAD0B,EAEI3G,qBAFJ,mBAE3B0G,EAF2B,KAEdE,EAFc,KAclC,OAVArG,qBAAU,WAAM,4CACd,8BAAAC,EAAA,6DACQqG,EAAeC,YAAYC,EAASjC,eAD5C,SAEuB+B,EAAaG,QAAQN,cAAcO,OAF1D,OAEQC,EAFR,OAGEN,EAAe,IAAIpF,IAAU0F,IAH/B,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAACR,IAEGD,EEjBaU,GACdC,EFoCwB,SAAC3D,GAA0B,IAAD,EAC1B1D,mBAAS,IAAIwB,IAAU,IADG,mBACjDD,EADiD,KACxC+B,EADwC,KAEhDqD,EAAgBrG,cAAhBqG,YAYR,OAVApG,qBAAU,YACU,uCAAG,8BAAAC,EAAA,6DACbqG,EAAeC,YAAYC,EAASjC,eADvB,SAED+B,EAAaG,QAAQM,UAAU,8CAA8CL,OAF5E,OAEbM,EAFa,OAGnBjE,EAAW,IAAI9B,IAAU+F,IAHN,2CAAH,oDAMlB1D,KACC,CAACH,EAAciD,IAEXpF,EElDeiG,CAAiB1C,eACjC2C,EAAQC,cACR3C,EAAWC,cACX2C,EAAajB,EAAcA,EAAYkB,MAAMP,GAAiB,IAAI7F,IAAU,GAC5EqG,EAAahD,YAAiB8C,GAC9BG,EAAY/C,EAASgD,MAAMJ,GACjCK,QAAQC,IAAIlD,EAASiB,QAAQ,IAE7B,IAAIkC,EAAgB,EACjBT,GAASA,EAAM,IAAMA,EAAM,GAAGS,gBAC/BA,EAAgB,IAAI1G,IAAUiG,EAAM,GAAGS,eAAehE,IAAI,IAAI1C,IAAU,IAAI6D,IAAI,KAAKJ,YAIvF,IAAMkD,EFKuB,WAAO,IAC5BxB,EAAgBrG,cAAhBqG,YAD2B,EAEG3G,qBAFH,mBAE5B0G,EAF4B,KAEfE,EAFe,KAcnC,OAVArG,qBAAU,WAAM,4CACd,8BAAAC,EAAA,6DACQqG,EAAeC,YAAYC,EAASqB,eAD5C,SAEuBvB,EAAaG,QAAQN,cAAcO,OAF1D,OAEQC,EAFR,OAGEN,EAAe,IAAIpF,IAAU0F,IAH/B,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAACR,IAEGD,EEnBc2B,GACfC,EFsCyB,SAAC5E,GAA0B,IAAD,EAC3B1D,mBAAS,IAAIwB,IAAU,IADI,mBAClDD,EADkD,KACzC+B,EADyC,KAEjDqD,EAAgBrG,cAAhBqG,YAYR,OAVApG,qBAAU,YACU,uCAAG,8BAAAC,EAAA,6DACbqG,EAAeC,YAAYC,EAASqB,eADvB,SAEDvB,EAAaG,QAAQM,UAAU,8CAA8CL,OAF5E,OAEbM,EAFa,OAGnBjE,EAAW,IAAI9B,IAAU+F,IAHN,2CAAH,oDAMlB1D,KACC,CAACH,EAAciD,IAEXpF,EEpDgBgH,CAAkBH,eACnCI,EAASC,cACTC,EAAYC,cACZC,EAAcT,EAAeA,EAAaP,MAAMU,GAAkB,IAAI9G,IAAU,GAChFqH,EAAchE,YAAiB+D,GAC/BE,EAAaJ,EAAUX,MAAMa,GAG/BG,EAAgB,EAKpB,OAJGP,GAAUA,EAAO,IAAMA,EAAO,GAAGN,gBAClCa,EAAgB,IAAIvH,IAAUgH,EAAO,GAAGN,eAAehE,IAAI,IAAI1C,IAAU,IAAI6D,IAAI,KAAKJ,YAIpF,qCACF,cAACsB,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAST,KAAK,KAAKC,GAAG,OAAtB,SACGlD,EAAgB,IAAK,eAExB,eAAC2D,GAAD,WACE,cAAC,IAAD,CAAM3E,SAAS,OAAOkB,MAAM,QAA5B,2BACA,eAAC,IAAD,CAAMlB,SAAS,OAAOkB,MAAM,QAA5B,cAAsCgC,EAASiB,QAAQ,SAGzD,eAACQ,GAAD,WACE,cAAC,IAAD,CAAM3E,SAAS,OAAf,SAAuBgB,EAAgB,IAAK,uBAC3CgF,GAAc,cAAC,EAAD,CAAWhG,SAAS,OAAOF,MAAOkG,EAAYjG,SAAU,OAEzE,eAAC4E,GAAD,WACE,cAAC,IAAD,CAAM3E,SAAS,OAAf,SAAuBgB,EAAgB,IAAK,gBAC5C,cAAC,EAAD,CAAWhB,SAAS,OAAOF,MAAOkD,YAAiBiD,GAAYlG,SAAU,EAAGE,OAAO,SAErF,eAAC0E,GAAD,WACE,cAAC,IAAD,CAAM3E,SAAS,OAAf,SAAuBgB,EAAgB,IAAK,uBAC5C,cAAC,EAAD,CAAWhB,SAAS,OAAOF,MAAOkD,YAAiBwC,GAAgBzF,SAAU,OAE/E,eAAC4E,GAAD,WACE,cAAC,IAAD,CAAM3E,SAAS,OAAf,SAAuBgB,EAAgB,IAAK,oBAC5C,cAAC,IAAD,CAAMH,MAAI,EAACb,SAAS,OAApB,SAA4BqG,YAK9B,cAAC3B,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAST,KAAK,KAAKC,GAAG,OAAtB,yBAGA,eAACS,GAAD,WACE,cAAC,IAAD,CAAM3E,SAAS,OAAOkB,MAAM,QAA5B,2BACA,eAAC,IAAD,CAAMlB,SAAS,OAAOkB,MAAM,QAA5B,cAAsC2F,EAAU1C,QAAQ,SAG1D,eAACQ,GAAD,WACE,cAAC,IAAD,CAAM3E,SAAS,OAAf,gCACCgH,GAAe,cAAC,EAAD,CAAWhH,SAAS,OAAOF,MAAOkH,EAAajH,SAAU,OAE3E,eAAC4E,GAAD,WACE,cAAC,IAAD,CAAM3E,SAAS,OAAf,SAAuBgB,EAAgB,IAAK,gBAC5C,cAAC,EAAD,CAAWhB,SAAS,OAAOF,MAAOkD,YAAiBiE,GAAalH,SAAU,EAAGE,OAAO,SAEtF,eAAC0E,GAAD,WACE,cAAC,IAAD,CAAM3E,SAAS,OAAf,gCACA,cAAC,EAAD,CAAWA,SAAS,OAAOF,MAAOkD,YAAiByD,GAAiB1G,SAAU,OAEhF,eAAC4E,GAAD,WACE,cAAC,IAAD,CAAM3E,SAAS,OAAf,6BACA,cAAC,IAAD,CAAMa,MAAI,EAACb,SAAS,OAApB,SAA4BkH,gBCtGpCC,GAA6BjF,YAAOC,IAAPD,CAAH,kFAgDjBkF,GA1Cc,WACHnG,cAAxB,IAEMoG,EAAaC,cACXC,EAAcC,cAGtB,OACI,qCACM,cAACL,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASlD,KAAK,KAAKC,GAAG,OAAtB,sCAGA,qCAGI,cAAC,EAAD,CAAWpE,MAAOuH,EAAWjE,WAAYnD,OAAO,IAAIF,SAAU,IAEhE,cAAC,IAAD,CAAMmB,MAAM,aAAZ,+DAKR,cAACiG,GAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAASlD,KAAK,KAAKC,GAAG,OAAtB,sCAGA,qCAGI,cAAC,EAAD,CAAWpE,MAAOyH,EAAYnE,WAAYnD,OAAO,IAAIF,SAAU,IAE/D,cAAC,IAAD,CAAMmB,MAAM,aAAZ,oE,UCpChBuG,GAAoBvF,YAAOC,IAAPD,CAAH,yEAsCRwF,IAjCHxF,IAAOG,IAAV,oJAQW,WAClB,IAAMrB,EAAkBC,cAExB,OACE,cAACwG,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASxD,KAAK,KAAKC,GAAG,OAAtB,SACGlD,EAAgB,MAAO,mBAE1B,cAAC,KAAD,CACE2G,WAAY,CACVC,WAAY,UACZC,WAAY,gBAEdC,QAAS,CACPC,OAAQ,MACRC,OAAQ,qBACRC,MAAO,gBC/BbC,GAAOhG,IAAOG,IAAV,iZAaN,qBAAGG,MAAkB2F,aAAaC,MAQhCC,GAAQnG,YAAOoG,IAAPpG,CAAH,8SAUP,qBAAGM,MAAkB2F,aAAaI,MAMlC,qBAAG/F,MAAkB2F,aAAaC,MA+BvBI,GAxBQ,WACrB,IAAMxH,EAAkBC,cAExB,OACE,eAACwH,EAAA,EAAD,WACE,eAACP,GAAD,WACE,cAAC,IAAD,CAASQ,GAAG,KAAKzE,KAAK,KAAKC,GAAG,OAAOhD,MAAM,YAA3C,SACI,qBAAKyH,IAAI,mCAAmCC,IAAI,aAAaX,MAAO,IAAKF,OAAQ,QAGrF,cAAC,IAAD,UAAO/G,EAAgB,IAAK,SAE9B,8BACE,eAACqH,GAAD,WACE,cAACQ,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD","file":"static/js/16.fa495518.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingEgg',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({cakeBalance}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingEgg',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress, getCakeAddress2 } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useTotalSupply2 = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress2())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useBurnedBalance2 = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress2())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n\n        <Block>\n          <Label>{TranslateString(544, 'ROYA to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'ROYA in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(544, 'ROYA to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting ROYA')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance,useTotalSupply2, useBurnedBalance2 } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress, getCakeAddress2 } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd, usePriceCake2Busd, useL2Farms } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n  console.log(eggPrice.toFixed(2))\n\n  let royalPerBlock = 0;\n  if(farms && farms[0] && farms[0].royalPerBlock){\n    royalPerBlock = new BigNumber(farms[0].royalPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n\n  const totalSupply2 = useTotalSupply2();\n  const burnedBalance2 = useBurnedBalance2(getCakeAddress2())\n  const farms2 = useL2Farms();\n  const eggPrice2 = usePriceCake2Busd();\n  const circSupply2 = totalSupply2 ? totalSupply2.minus(burnedBalance2) : new BigNumber(0);\n  const cakeSupply2 = getBalanceNumber(circSupply2);\n  const marketCap2 = eggPrice2.times(circSupply2);\n\n\n  let crownPerBlock = 0;\n  if(farms2 && farms2[0] && farms2[0].royalPerBlock){\n    crownPerBlock = new BigNumber(farms2[0].royalPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n      <>\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Egg Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\" color=\"black\">Current Price</Text>\n          <Text fontSize=\"14px\" color=\"black\">${eggPrice.toFixed(2)}</Text>\n\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total ROYA Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total ROYA Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New ROYA/block')}</Text>\n          <Text bold fontSize=\"14px\">{royalPerBlock}</Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n\n        <StyledCakeStats>\n          <CardBody>\n            <Heading size=\"xl\" mb=\"24px\">\n              CROWN Stats\n            </Heading>\n            <Row>\n              <Text fontSize=\"14px\" color=\"black\">Current Price</Text>\n              <Text fontSize=\"14px\" color=\"black\">${eggPrice2.toFixed(2)}</Text>\n\n            </Row>\n            <Row>\n              <Text fontSize=\"14px\">Total CROWN Supply</Text>\n              {cakeSupply2 && <CardValue fontSize=\"14px\" value={cakeSupply2} decimals={0} />}\n            </Row>\n            <Row>\n              <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\n              <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap2)} decimals={0} prefix=\"$\" />\n            </Row>\n            <Row>\n              <Text fontSize=\"14px\">Total CROWN Burned</Text>\n              <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance2)} decimals={0} />\n            </Row>\n            <Row>\n              <Text fontSize=\"14px\">New CROWN/block</Text>\n              <Text bold fontSize=\"14px\">{crownPerBlock}</Text>\n            </Row>\n          </CardBody>\n        </StyledCakeStats>\n        </>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue, useTotalValue2 } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n    const totalValue2 = useTotalValue2();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n      <>\n            <StyledTotalValueLockedCard>\n              <CardBody>\n                <Heading size=\"lg\" mb=\"24px\">\n                 Total Value Locked (TVL)\n                </Heading>\n                <>\n                  {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n                  {/* <Heading size=\"xl\"> */}\n                    <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n                  {/* </Heading> */}\n                  <Text color=\"textSubtle\">Across all RoyalSwap Chef Farms and Pools</Text>\n                </>\n              </CardBody>\n            </StyledTotalValueLockedCard>\n\n          <StyledTotalValueLockedCard>\n              <CardBody>\n                  <Heading size=\"lg\" mb=\"24px\">\n                      Total Value Locked (TVL)\n                  </Heading>\n                  <>\n                      {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n                      {/* <Heading size=\"xl\"> */}\n                      <CardValue value={totalValue2.toNumber()} prefix=\"$\" decimals={2}/>\n                      {/* </Heading> */}\n                      <Text color=\"textSubtle\">Across all Layer 2 (CROWN) Farms and Pools</Text>\n                  </>\n              </CardBody>\n          </StyledTotalValueLockedCard>\n          </>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'theroyalswap'\n          }}\n          options={{\n            height: '300',\n            chrome: \"noheader, nofooter\",\n            width: \"400\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  \n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    \n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n            <img src=\"/images/egg/LogoTextNewWhite.png\" alt=\"Royal Swap\" width={410} height={191} />\n\n        </Heading>\n        <Text>{TranslateString(578, '')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}